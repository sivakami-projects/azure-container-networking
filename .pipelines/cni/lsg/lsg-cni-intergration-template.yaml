parameters:
  dependsOn: ""
  name: ""
  clusterType: ""
  clusterName: ""
  nodeCount: ""
  vmSize: ""
  os: linux
  arch: ""
  osSKU: Ubuntu

# CNIv2
# + Should be able to scale up/down the pods successfully certain number of times.
# + Node reboot scenarios should be covered.
# + The CNS state should be validated with that of CNI state.
# + Pods should have ips assigned and connectivity/datapath test should be present.
# + CNS restart and validates the state

stages:
  - stage: create_${{ parameters.name }}
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - setup
    displayName: "Create Cluster - ${{ parameters.clusterName }}"
    jobs:
      - job: create_aks_cluster_with_${{ parameters.name }}
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                make -C ./hack/aks ${{ parameters.clusterType }} \
                AZCLI=az REGION=$(LOCATION) SUB=$(SUB_AZURE_NETWORK_AGENT_BUILD_VALIDATIONS) \
                CLUSTER=${{ parameters.clusterName }}-$(commitID) \
                VM_SIZE=${{ parameters.vmSize }} \
                AUTOUPGRADE=none
            name: "CreateAksCluster"
            displayName: "Create AKS Cluster"

  - stage: ${{ parameters.name }}
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
      cnsVersion: $[ stagedependencies.setup.env.outputs['SetEnvVars.cnsVersion'] ]
      cniVersion: $[ stagedependencies.setup.env.outputs['SetEnvVars.cniVersion'] ]
      kernelType: $[ stagedependencies.setup.env.outputs['SetEnvVars.kernelType'] ]
    pool:
      name: $(BUILD_POOL_NAME_DEFAULT)
    dependsOn:
      - create_${{ parameters.name }}
      - setup
    displayName: "CNIv2 Test - ${{ parameters.name }}"
    jobs:
      - job: integration
        displayName: "Integration Test - ${{ parameters.name }}"
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                echo cns version - $(cnsVersion)
                echo cni version - $(cniVersion)

                echo "Start Integration Tests on Overlay Cluster"
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(commitID)
                kubectl cluster-info
                kubectl get po -owide -A
                sudo -E env "PATH=$PATH" make test-integration CNS_VERSION=$(cnsVersion) CNI_VERSION=$(cniVersion) INSTALL_CNS=true INSTALL_AZURE_CNI_OVERLAY=true CNS_IMAGE_REPO=$(CNS_IMAGE_REPO) CNI_IMAGE_REPO=$(CNI_IMAGE_REPO)
            name: "overlaye2e"
            displayName: "Overlay Integration"
            retryCountOnTaskFailure: 2
      - job: kernel_upgrade
        displayName: "Kernel Node Upgrade"
        dependsOn: integration
        steps:
          - template: kernel-upgrade-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              KernelVersion : ${{ parameters.KernelVersion }}
              ProposedRepoVersion : ${{ parameters.ProposedRepoVersion }}
      - job: deploy_pods
        displayName: "Scale Test"
        dependsOn: kernel_upgrade
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              scaleup: ${SCALEUP_LINUX}
              os: ${{ parameters.os }}
              iterations: ${ITERATIONS_LINUX}
              nodeCount: ${{ parameters.nodeCount }}
              cni: cniv2
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv2
      - job: restart_nodes
        displayName: "Restart Test"
        dependsOn: deploy_pods
        steps:
          - template: ../load-test-templates/restart-node-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv2
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv2
              restartCase: "true"
      - job: restart_cns
        displayName: "Restart and Validate CNS"
        dependsOn: restart_nodes
        steps:
          - template: ../load-test-templates/restart-cns-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv2
              scaleup: ${SCALEUP_LINUX}
              nodeCount: ${{ parameters.nodeCount }}
      - job: recover
        displayName: "Recover Resources"
        dependsOn: restart_cns
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                echo "Delete load-test Namespace"
                make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(commitID)
                kubectl get ns --no-headers | grep -v 'kube\|default' | awk '{print $1}'
                delete=`kubectl get ns --no-headers | grep -v 'kube\|default' | awk '{print $1}'`
                kubectl delete ns $delete
                kubectl cluster-info
                kubectl get po -owide -A
            name: "recover"
            displayName: "Delete test Namespaces"
      - template: ../k8s-e2e/k8s-e2e-job-template.yaml
        parameters:
          sub: $(BUILD_VALIDATIONS_SERVICE_CONNECTION)
          clusterName: ${{ parameters.clusterName }}-$(commitID)
          os: ${{ parameters.os }}
          dependsOn: recover
          datapath: true
          dns: true
          portforward: true
          service: true
          hostport: true
      - job: failedE2ELogs
        displayName: "Failure Logs"
        dependsOn:
          - integration
          - kernel_upgrade
          - deploy_pods
          - restart_nodes
          - restart_cns
          - recover
          - cni_${{ parameters.os }}
        condition: failed()
        steps:
          - template: ../../templates/log-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}-$(commitID)
              os: ${{ parameters.os }}
              cni: cniv2
